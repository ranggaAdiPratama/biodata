// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: hobby.sql

package db

import (
	"context"
)

const checkHobbyWithPage = `-- name: CheckHobbyWithPage :many

SELECT id, user_id, name, created_at, updated_at
FROM hobbies
WHERE
    user_id = $1
ORDER BY name
LIMIT $2
OFFSET
    $3
`

type CheckHobbyWithPageParams struct {
	UserID int64 `json:"user_id"`
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) CheckHobbyWithPage(ctx context.Context, arg CheckHobbyWithPageParams) ([]Hobby, error) {
	rows, err := q.db.QueryContext(ctx, checkHobbyWithPage, arg.UserID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Hobby{}
	for rows.Next() {
		var i Hobby
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Name,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const createHobby = `-- name: CreateHobby :one

INSERT INTO hobbies (user_id, name) VALUES ($1, $2) RETURNING id, user_id, name, created_at, updated_at
`

type CreateHobbyParams struct {
	UserID int64  `json:"user_id"`
	Name   string `json:"name"`
}

func (q *Queries) CreateHobby(ctx context.Context, arg CreateHobbyParams) (Hobby, error) {
	row := q.db.QueryRowContext(ctx, createHobby, arg.UserID, arg.Name)
	var i Hobby
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteHobby = `-- name: DeleteHobby :exec

DELETE FROM hobbies WHERE id = $1
`

func (q *Queries) DeleteHobby(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteHobby, id)
	return err
}

const getHobby = `-- name: GetHobby :many

SELECT id, user_id, name, created_at, updated_at FROM hobbies ORDER BY id
`

func (q *Queries) GetHobby(ctx context.Context) ([]Hobby, error) {
	rows, err := q.db.QueryContext(ctx, getHobby)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Hobby{}
	for rows.Next() {
		var i Hobby
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Name,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getHobbyByUserId = `-- name: GetHobbyByUserId :many
SELECT id, user_id, name, created_at, updated_at FROM hobbies WHERE user_id = $1 ORDER BY name
`

func (q *Queries) GetHobbyByUserId(ctx context.Context, userID int64) ([]Hobby, error) {
	rows, err := q.db.QueryContext(ctx, getHobbyByUserId, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Hobby{}
	for rows.Next() {
		var i Hobby
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Name,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getHobbyForUpdate = `-- name: GetHobbyForUpdate :one

SELECT id, user_id, name, created_at, updated_at FROM hobbies WHERE id = $1 LIMIT 1 FOR NO KEY UPDATE
`

func (q *Queries) GetHobbyForUpdate(ctx context.Context, id int64) (Hobby, error) {
	row := q.db.QueryRowContext(ctx, getHobbyForUpdate, id)
	var i Hobby
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getHobbywithUser = `-- name: GetHobbywithUser :many
SELECT hobbies.name, users.name as user
FROM hobbies
    JOIN users ON hobbies.user_id = users.id
ORDER BY users.name
`

type GetHobbywithUserRow struct {
	Name string `json:"name"`
	User string `json:"user"`
}

func (q *Queries) GetHobbywithUser(ctx context.Context) ([]GetHobbywithUserRow, error) {
	rows, err := q.db.QueryContext(ctx, getHobbywithUser)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetHobbywithUserRow{}
	for rows.Next() {
		var i GetHobbywithUserRow
		if err := rows.Scan(&i.Name, &i.User); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateHobby = `-- name: UpdateHobby :one

UPDATE hobbies SET name = $2 WHERE id = $1 RETURNING id, user_id, name, created_at, updated_at
`

type UpdateHobbyParams struct {
	ID   int64  `json:"id"`
	Name string `json:"name"`
}

func (q *Queries) UpdateHobby(ctx context.Context, arg UpdateHobbyParams) (Hobby, error) {
	row := q.db.QueryRowContext(ctx, updateHobby, arg.ID, arg.Name)
	var i Hobby
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
